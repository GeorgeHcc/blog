(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{392:function(t,a,s){"use strict";s.r(a);var r=s(4),n=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("收集各大平台JavaScript面试题，持续更新！")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("由于作者时间有限，部分面试题没有写题解。")]),t._v(" "),a("p",[t._v("文章有不严谨的地方，或者你有更好的解决方法都可在文末评论区留言或者联系作者修改。")])]),t._v(" "),a("h1",{attrs:{id:"一、数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、数据类型"}},[t._v("#")]),t._v(" 一、数据类型")]),t._v(" "),a("h2",{attrs:{id:"_1-javascript-有哪些数据类型-它们的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-javascript-有哪些数据类型-它们的区别"}},[t._v("#")]),t._v(" 1. JavaScript 有哪些数据类型，它们的区别")]),t._v(" "),a("h2",{attrs:{id:"_2-数据类型的检测的方式有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据类型的检测的方式有哪些"}},[t._v("#")]),t._v(" 2. 数据类型的检测的方式有哪些？")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("笔记")]),t._v(" "),a("p",[t._v("1.typeof\n缺点不能检测出null，因为null属于object类型\n2.万能方法object.tostring.call()")])]),t._v(" "),a("h2",{attrs:{id:"_3-判断数组的方式有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-判断数组的方式有哪些"}},[t._v("#")]),t._v(" 3.判断数组的方式有哪些？")]),t._v(" "),a("h2",{attrs:{id:"_4-null-和-undefined-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-null-和-undefined-的区别"}},[t._v("#")]),t._v(" 4. null 和 undefined 的区别")]),t._v(" "),a("h2",{attrs:{id:"_5-typeof-null-的结果是什么-为什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-typeof-null-的结果是什么-为什么"}},[t._v("#")]),t._v(" 5. typeof null 的结果是什么？为什么")]),t._v(" "),a("h2",{attrs:{id:"_6-instance-of-操作符的实现原理及实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-instance-of-操作符的实现原理及实现"}},[t._v("#")]),t._v(" 6.instance of 操作符的实现原理及实现")]),t._v(" "),a("h2",{attrs:{id:"_7-为什么-0-1-0-2-0-3-如何让其相等"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-为什么-0-1-0-2-0-3-如何让其相等"}},[t._v("#")]),t._v(" 7.为什么 0.1+0.2 ！=0.3，如何让其相等")]),t._v(" "),a("h2",{attrs:{id:"_8-如何获取安全的-undefined-值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-如何获取安全的-undefined-值"}},[t._v("#")]),t._v(" 8. 如何获取安全的 undefined 值")]),t._v(" "),a("h2",{attrs:{id:"_9-typeof-nan-的结果是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-typeof-nan-的结果是什么"}},[t._v("#")]),t._v(" 9. typeof NaN 的结果是什么")]),t._v(" "),a("h2",{attrs:{id:"_10-isnan-和-number-isnan-的函数的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-isnan-和-number-isnan-的函数的区别"}},[t._v("#")]),t._v(" 10. isNaN 和 Number.isNaN 的函数的区别")]),t._v(" "),a("h2",{attrs:{id:"_11-操作符的强制类型转换规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-操作符的强制类型转换规则"}},[t._v("#")]),t._v(" 11. ==操作符的强制类型转换规则？")]),t._v(" "),a("h2",{attrs:{id:"_12-其他值到字符串、数字值、布尔值的转换规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-其他值到字符串、数字值、布尔值的转换规则"}},[t._v("#")]),t._v(" 12. 其他值到字符串、数字值、布尔值的转换规则？")]),t._v(" "),a("h2",{attrs:{id:"_13-和-操作符的返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-和-操作符的返回值"}},[t._v("#")]),t._v(" 13. ||和&&操作符的返回值？")]),t._v(" "),a("h2",{attrs:{id:"_14-object-is-与比较操作符-、-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-object-is-与比较操作符-、-的区别"}},[t._v("#")]),t._v(" 14. object.is()与比较操作符“ === ” 、“ ==”的区别")]),t._v(" "),a("h2",{attrs:{id:"_15-什么是-javascript-的包装类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-什么是-javascript-的包装类型"}},[t._v("#")]),t._v(" 15. 什么是 JavaScript 的包装类型")]),t._v(" "),a("h2",{attrs:{id:"_16-javascript-如何进行隐式类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-javascript-如何进行隐式类型转换"}},[t._v("#")]),t._v(" 16. JavaScript 如何进行隐式类型转换？")]),t._v(" "),a("h2",{attrs:{id:"_17-操作符什么时候用与字符串的拼接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-操作符什么时候用与字符串的拼接"}},[t._v("#")]),t._v(" 17. +操作符什么时候用与字符串的拼接")]),t._v(" "),a("h2",{attrs:{id:"_18-为什么会有-bigint-的提案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-为什么会有-bigint-的提案"}},[t._v("#")]),t._v(" 18. 为什么会有 BigInt 的提案？")]),t._v(" "),a("h2",{attrs:{id:"_19-object-assign-和扩展运算符是深拷贝还是浅拷贝-两者区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-object-assign-和扩展运算符是深拷贝还是浅拷贝-两者区别"}},[t._v("#")]),t._v(" 19. object.assign 和扩展运算符是深拷贝还是浅拷贝，两者区别")]),t._v(" "),a("h1",{attrs:{id:"二、es6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、es6"}},[t._v("#")]),t._v(" 二、ES6")]),t._v(" "),a("h2",{attrs:{id:"_1-let、const、var-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-let、const、var-的区别"}},[t._v("#")]),t._v(" 1. let、const、var 的区别")]),t._v(" "),a("h2",{attrs:{id:"_2-const-对象的属性可以修改吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-const-对象的属性可以修改吗"}},[t._v("#")]),t._v(" 2. const 对象的属性可以修改吗")]),t._v(" "),a("h2",{attrs:{id:"_3-如果-new-一个箭头函数会怎么样"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-如果-new-一个箭头函数会怎么样"}},[t._v("#")]),t._v(" 3.如果 new 一个箭头函数会怎么样")]),t._v(" "),a("h2",{attrs:{id:"_4-箭头函数与普通函数的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-箭头函数与普通函数的区别"}},[t._v("#")]),t._v(" 4. 箭头函数与普通函数的区别")]),t._v(" "),a("h2",{attrs:{id:"_5-箭头函数的-this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-箭头函数的-this"}},[t._v("#")]),t._v(" 5. 箭头函数的 this")]),t._v(" "),a("h2",{attrs:{id:"_6-扩展运算符的作用及使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-扩展运算符的作用及使用场景"}},[t._v("#")]),t._v(" 6. 扩展运算符的作用及使用场景")]),t._v(" "),a("h2",{attrs:{id:"_7-proxy-可以实现什么功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-proxy-可以实现什么功能"}},[t._v("#")]),t._v(" 7. Proxy 可以实现什么功能？")]),t._v(" "),a("h2",{attrs:{id:"_8-对-对象与数组结构的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-对-对象与数组结构的理解"}},[t._v("#")]),t._v(" 8.对 对象与数组结构的理解")]),t._v(" "),a("h2",{attrs:{id:"_9-如何提取高度嵌套的对象里的指定属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-如何提取高度嵌套的对象里的指定属性"}},[t._v("#")]),t._v(" 9. 如何提取高度嵌套的对象里的指定属性？")]),t._v(" "),a("h2",{attrs:{id:"_10-对-rest-参数的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-对-rest-参数的理解"}},[t._v("#")]),t._v(" 10. 对 rest 参数的理解")]),t._v(" "),a("h2",{attrs:{id:"_11-es6-中模板语法与字符串处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-es6-中模板语法与字符串处理"}},[t._v("#")]),t._v(" 11. ES6 中模板语法与字符串处理")]),t._v(" "),a("h1",{attrs:{id:"三、javascript-基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、javascript-基础"}},[t._v("#")]),t._v(" 三、JavaScript 基础")]),t._v(" "),a("h2",{attrs:{id:"_1-new-操作符的实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-new-操作符的实现原理"}},[t._v("#")]),t._v(" 1.new 操作符的实现原理")]),t._v(" "),a("h2",{attrs:{id:"_2-map-和-object-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-map-和-object-的区别"}},[t._v("#")]),t._v(" 2. map 和 object 的区别")]),t._v(" "),a("h2",{attrs:{id:"_3-map-和-weakmap-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-map-和-weakmap-的区别"}},[t._v("#")]),t._v(" 3. map 和 weakMap 的区别")]),t._v(" "),a("h2",{attrs:{id:"_4-javascript-有哪些内置对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-javascript-有哪些内置对象"}},[t._v("#")]),t._v(" 4. JavaScript 有哪些内置对象")]),t._v(" "),a("h2",{attrs:{id:"_5-常用的正则表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-常用的正则表达式"}},[t._v("#")]),t._v(" 5.常用的正则表达式")]),t._v(" "),a("h2",{attrs:{id:"_6-对-json-的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-对-json-的理解"}},[t._v("#")]),t._v(" 6.对 JSON 的理解")]),t._v(" "),a("h2",{attrs:{id:"_7-javascript-脚本延迟加载的方式有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-javascript-脚本延迟加载的方式有哪些"}},[t._v("#")]),t._v(" 7. JavaScript 脚本延迟加载的方式有哪些")]),t._v(" "),a("h2",{attrs:{id:"_8-javascript-类数组对象的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-javascript-类数组对象的定义"}},[t._v("#")]),t._v(" 8. JavaScript 类数组对象的定义")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("笔记")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("JavaScript 中实现的 iterable 接口的对象即为类数组对象，类数组对象就是可迭代的对象。")])]),t._v(" "),a("li",[a("p",[t._v("很多内置对象都实现了 Iterable 接口：字符串，数组，映射，集合，arguments 对象，NodeList 等 DOM 集合类型。")])]),t._v(" "),a("li",[a("p",[t._v("判断一个对象是否可迭代（类数组对象）最简单的方式就是看一个对象是否具有 symbol.iterator 的属性")])])])]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"george"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// f values() { [native code] }")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h2",{attrs:{id:"_9-数组有哪些原生方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-数组有哪些原生方法"}},[t._v("#")]),t._v(" 9.数组有哪些原生方法")]),t._v(" "),a("h2",{attrs:{id:"_10-unicode、utf-8、utf-16、utf-32-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-unicode、utf-8、utf-16、utf-32-的区别"}},[t._v("#")]),t._v(" 10. Unicode、UTF-8、UTF-16、UTF-32 的区别")]),t._v(" "),a("h2",{attrs:{id:"_11-常见的位运算符有哪些-计算规则是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-常见的位运算符有哪些-计算规则是什么"}},[t._v("#")]),t._v(" 11. 常见的位运算符有哪些，计算规则是什么")]),t._v(" "),a("h2",{attrs:{id:"_12-为什么函数的-arguments-参数是类数组而不是数组-如何遍历类数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-为什么函数的-arguments-参数是类数组而不是数组-如何遍历类数组"}},[t._v("#")]),t._v(" 12. 为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组")]),t._v(" "),a("h2",{attrs:{id:"_13-什么是-dom、bom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-什么是-dom、bom"}},[t._v("#")]),t._v(" 13 .什么是 DOM、BOM")]),t._v(" "),a("h2",{attrs:{id:"_14-对类数组的理解-如何转化为数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-对类数组的理解-如何转化为数组"}},[t._v("#")]),t._v(" 14. 对类数组的理解，如何转化为数组")]),t._v(" "),a("h2",{attrs:{id:"_15-escape、encodeuri、encodeuricomponent-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-escape、encodeuri、encodeuricomponent-的区别"}},[t._v("#")]),t._v(" 15.escape、encodeURI、encodeURIComponent 的区别")]),t._v(" "),a("h2",{attrs:{id:"_16-对-ajax-的理解-实现一个-ajax-请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-对-ajax-的理解-实现一个-ajax-请求"}},[t._v("#")]),t._v(" 16. 对 Ajax 的理解，实现一个 Ajax 请求")]),t._v(" "),a("h2",{attrs:{id:"_17-javascript-为什么要进行变量提升-它导致了什么问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-javascript-为什么要进行变量提升-它导致了什么问题"}},[t._v("#")]),t._v(" 17. Javascript 为什么要进行变量提升？它导致了什么问题")]),t._v(" "),a("h2",{attrs:{id:"_18-什么是尾调用-使用尾调用的好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-什么是尾调用-使用尾调用的好处"}},[t._v("#")]),t._v(" 18. 什么是尾调用，使用尾调用的好处")]),t._v(" "),a("h2",{attrs:{id:"_19-es6-模块与-commonjs-模块有什么异同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-es6-模块与-commonjs-模块有什么异同"}},[t._v("#")]),t._v(" 19. ES6 模块与 CommonJS 模块有什么异同")]),t._v(" "),a("h2",{attrs:{id:"_20-常见的-dom-操作有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-常见的-dom-操作有哪些"}},[t._v("#")]),t._v(" 20.常见的 DOM 操作有哪些")]),t._v(" "),a("h2",{attrs:{id:"_21-use-strict-是什么意思-使用它区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21-use-strict-是什么意思-使用它区别是什么"}},[t._v("#")]),t._v(" 21.use strict 是什么意思 ? 使用它区别是什么？")]),t._v(" "),a("h2",{attrs:{id:"_22-如何判断一个对象是否属于某个类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22-如何判断一个对象是否属于某个类"}},[t._v("#")]),t._v(" 22.如何判断一个对象是否属于某个类？")]),t._v(" "),a("h2",{attrs:{id:"_23-强类型语言和弱类型语言的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23-强类型语言和弱类型语言的区别"}},[t._v("#")]),t._v(" 23.强类型语言和弱类型语言的区别")]),t._v(" "),a("h2",{attrs:{id:"_24-解释性语言和编译型语言的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-解释性语言和编译型语言的区别"}},[t._v("#")]),t._v(" 24.解释性语言和编译型语言的区别")]),t._v(" "),a("h2",{attrs:{id:"_25-for-in-和-for-of-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25-for-in-和-for-of-的区别"}},[t._v("#")]),t._v(" 25.for...in 和 for...of 的区别")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("for...in 用于遍历对象,for...of 用于遍历可迭代对象（数组,string,集合，映射,NodeList 等）")]),t._v(" "),a("li",[t._v("for...in 遍历的是 key,for...of 遍历的是索引")])])]),t._v(" "),a("h2",{attrs:{id:"_26-如何使用-for-of-遍历对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_26-如何使用-for-of-遍历对象"}},[t._v("#")]),t._v(" 26.如何使用 for...of 遍历对象")]),t._v(" "),a("blockquote",[a("p",[t._v("让对象实现可迭代协议")])]),t._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[t._v("点击查看")]),t._v(" "),a("div",{staticClass:"language-Javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 显式实现可迭代协议")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("i")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"age"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"codeAge"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"position"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"george"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("23")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fronted developer"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//可迭代对象通过next()进行迭代")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("done")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("done")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//实现for of迭代对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { name: 'george' }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { age: 23 }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { codeAge: 3 }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { position: 'fronted developer' }")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br")])])]),t._v(" "),a("h2",{attrs:{id:"_27-ajax、axios、fetch-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_27-ajax、axios、fetch-的区别"}},[t._v("#")]),t._v(" 27.ajax、axios、fetch 的区别")]),t._v(" "),a("h2",{attrs:{id:"_28-数组的遍历方法有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_28-数组的遍历方法有哪些"}},[t._v("#")]),t._v(" 28.数组的遍历方法有哪些")]),t._v(" "),a("h2",{attrs:{id:"_30-foreach-和-map-方法有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_30-foreach-和-map-方法有什么区别"}},[t._v("#")]),t._v(" 30.forEach 和 map 方法有什么区别")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("笔记")]),t._v(" "),a("ul",[a("li",[t._v("forEach 方法与 map 方法都接受两个参数，一个回调(item,index,arr)和一个 thisArg 用于绑定回调函数里的 this 指向")]),t._v(" "),a("li",[t._v("forEach()对数组的每个元素执行一次回调函数,map 用于创建一个新数组，这个新数组由原数组的每个元素都调用一次回调函数的返回值组成")])])]),t._v(" "),a("h2",{attrs:{id:"_31-什么是闭包-如何理解闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_31-什么是闭包-如何理解闭包"}},[t._v("#")]),t._v(" 31.什么是闭包？如何理解闭包？")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("笔记")]),t._v(" "),a("p",[t._v("从广义上将所有函数都是闭包，从狭义上看一个函数存在对外部作用域的引用就会形成闭包。")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("闭包会造成内存泄漏，需要手动释放。浏览器对闭包的优化：没有被闭包引用的变量会被浏览器自动释放内存")])]),t._v(" "),a("h1",{attrs:{id:"javascript高级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript高级"}},[t._v("#")]),t._v(" JavaScript高级")]),t._v(" "),a("h2",{attrs:{id:"_1-如何理解js的异步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-如何理解js的异步"}},[t._v("#")]),t._v(" 1.如何理解JS的异步？")]),t._v(" "),a("ul",[a("li",[t._v("JS是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个")]),t._v(" "),a("li",[t._v("渲染主线程承担着许多工作，如渲染页面、执行JS等。如果采用同步的方式，就可能导致主线程阻塞，从而导致消息队列中的其他任务无法执行。一方面会导致繁忙的主线程浪费时间，另一方面导致页面渲染无法及时更新，造成卡死现象")]),t._v(" "),a("li",[t._v("所以浏览器采用异步的方式来避免这种情况。具体做法是：当遇到某些任务时，比如时间监听，网络，计时器等，主线程会将这些任务交给其他线程处理，自身立即结束任务的执行，转向执行后续的任务，当其他线程执行完后，将事先传递的回调函数包装成任务，加入到消息队列的末尾，等待主线程调度执行。等到主线程的任务执行完毕后再去调度执行消息队列的任务。在这种模式下浏览器永不阻塞，从而最大程度上保证了单线程的流畅运行")])]),t._v(" "),a("h2",{attrs:{id:"_2-js事件循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-js事件循环"}},[t._v("#")]),t._v(" 2.JS事件循环")])])}),[],!1,null,null,null);a.default=n.exports}}]);